/*
Colours are an important part of charts. Our aim is to avoid less readable and misleading colour schemes. So we rely on the scientific colour maps developed by Fabio Crameri. These are perceptually uniform, colour blind friendly, and monochrome friendly.

Reading material:
- Summary poster: https://www.fabiocrameri.ch/ws/media-library/a17d02961b3a4544961416de2d7900a4/posterscientificcolourmaps_crameri.pdf
- Article "The misuse of colour in science communication" https://www.nature.com/articles/s41467-020-19160-7
*/

#[derive(Clone, Debug, PartialEq)]
pub struct ColourScheme {
    colours: Vec<Colour>,
}

#[derive(Copy, Clone, Debug, PartialEq)]
pub struct Colour {
    red: u8,
    green: u8,
    blue: u8,
}

impl From<(u8, u8, u8)> for Colour {
    fn from((red, green, blue): (u8, u8, u8)) -> Self {
        Self { red, green, blue }
    }
}

impl Default for ColourScheme {
    fn default() -> Self {
        ARBITRARY.as_ref().into()
    }
}

impl From<&[(u8, u8, u8)]> for ColourScheme {
    fn from(colours: &[(u8, u8, u8)]) -> Self {
        Self {
            colours: colours.iter().map(|&c| c.into()).collect(),
        }
    }
}

impl From<&[Colour]> for ColourScheme {
    fn from(colours: &[Colour]) -> Self {
        Self {
            colours: colours.to_vec(),
        }
    }
}

impl ColourScheme {
    pub fn iter(&self) -> ColourSchemeIter<'_> {
        ColourSchemeIter(self, 0)
    }

    pub fn by_index(&self, index: usize) -> Colour {
        let index = index.rem_euclid(self.colours.len());
        self.colours[index]
    }
}

impl std::fmt::Display for Colour {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "#{:02X}{:02X}{:02X}", self.red, self.green, self.blue)
    }
}

pub struct ColourSchemeIter<'a>(&'a ColourScheme, usize);

impl<'a> Iterator for ColourSchemeIter<'a> {
    type Item = Colour;

    fn next(&mut self) -> Option<Self::Item> {
        let colour = self.0.by_index(self.1);
        self.1 += 1;
        Some(colour)
    }
}

pub static LIGHTISH_GREY: (u8, u8, u8) = (0xD2, 0xD2, 0xD2);
pub static LIGHTER_GREY: (u8, u8, u8) = (0xEF, 0xF2, 0xFA);
pub static LIGHT_GREY: (u8, u8, u8) = GRAYC[6];

/* Named palettes */

/// Arbitrary colours for a brighter palette
pub const ARBITRARY: [(u8, u8, u8); 10] = [
    (0x12, 0xA5, 0xED), // Blue
    (0xF5, 0x32, 0x5B), // Red
    (0x71, 0xc6, 0x14), // Green
    (0xFF, 0x84, 0x00), // Orange
    (0x7b, 0x4d, 0xff), // Purple
    (0xdb, 0x4c, 0xb2), // Magenta
    (0x92, 0xb4, 0x2c), // Darker green
    (0xFF, 0xCA, 0x00), // Yellow
    (0x22, 0xd2, 0xba), // Turquoise
    (0xea, 0x60, 0xdf), // Pink
];

/* Scientific colour maps from https://www.fabiocrameri.ch/colourmaps/ */

pub const ACTON: [(u8, u8, u8); 10] = [
    (0x26, 0x0D, 0x40),
    (0x3E, 0x2E, 0x5E),
    (0x54, 0x4D, 0x7B),
    (0x71, 0x61, 0x8C),
    (0x93, 0x65, 0x8F),
    (0xBD, 0x69, 0x92),
    (0xD5, 0x86, 0xAA),
    (0xDF, 0xAB, 0xC9),
    (0xE9, 0xCE, 0xE4),
    (0xF0, 0xEA, 0xFA),
];
pub const BAMAKO: [(u8, u8, u8); 10] = [
    (0x00, 0x3B, 0x47),
    (0x0E, 0x43, 0x3F),
    (0x20, 0x4F, 0x34),
    (0x36, 0x5E, 0x26),
    (0x52, 0x70, 0x15),
    (0x73, 0x83, 0x02),
    (0x98, 0x8D, 0x03),
    (0xBE, 0xA8, 0x2E),
    (0xE2, 0xC8, 0x6E),
    (0xFF, 0xE5, 0xAD),
];
pub const BAM: [(u8, u8, u8); 10] = [
    (0x65, 0x02, 0x4B),
    (0x9E, 0x3C, 0x85),
    (0xC9, 0x70, 0xB2),
    (0xE4, 0xAE, 0xD6),
    (0xF5, 0xE3, 0xEF),
    (0xEF, 0xF3, 0xE5),
    (0xC1, 0xDA, 0xA2),
    (0x7C, 0xA8, 0x56),
    (0x45, 0x7B, 0x2A),
    (0x0D, 0x4C, 0x00),
];
pub const BAMO: [(u8, u8, u8); 10] = [
    (0x4F, 0x30, 0x43),
    (0x87, 0x49, 0x79),
    (0xB8, 0x77, 0xA7),
    (0xD7, 0xB0, 0xC9),
    (0xD6, 0xCB, 0xC7),
    (0xBA, 0xC4, 0xA1),
    (0x83, 0x91, 0x65),
    (0x61, 0x65, 0x48),
    (0x4C, 0x42, 0x3B),
    (0x4E, 0x30, 0x42),
];
pub const BATLOW: [(u8, u8, u8); 10] = [
    (0x01, 0x19, 0x59),
    (0x10, 0x3F, 0x60),
    (0x1C, 0x5A, 0x62),
    (0x3C, 0x6D, 0x56),
    (0x68, 0x7B, 0x3E),
    (0x9D, 0x89, 0x2B),
    (0xD2, 0x93, 0x43),
    (0xF8, 0xA1, 0x7B),
    (0xFD, 0xB7, 0xBC),
    (0xFA, 0xCC, 0xFA),
];
pub const BATLOWK: [(u8, u8, u8); 10] = [
    (0x04, 0x05, 0x0A),
    (0x1A, 0x2C, 0x41),
    (0x36, 0x53, 0x5F),
    (0x4F, 0x66, 0x57),
    (0x6F, 0x78, 0x45),
    (0xA1, 0x8E, 0x38),
    (0xD8, 0x9E, 0x50),
    (0xF6, 0xA9, 0x86),
    (0xFD, 0xB9, 0xBF),
    (0xFA, 0xCC, 0xFA),
];
pub const BATLOWW: [(u8, u8, u8); 10] = [
    (0x01, 0x19, 0x59),
    (0x10, 0x3F, 0x60),
    (0x1B, 0x59, 0x62),
    (0x39, 0x6E, 0x59),
    (0x64, 0x7E, 0x43),
    (0x9A, 0x91, 0x32),
    (0xD0, 0xA3, 0x5A),
    (0xEE, 0xAF, 0x91),
    (0xFE, 0xD8, 0xD6),
    (0xFF, 0xFE, 0xFE),
];
pub const BERLIN: [(u8, u8, u8); 10] = [
    (0x9E, 0xB0, 0xFF),
    (0x5B, 0xA4, 0xDB),
    (0x2D, 0x75, 0x97),
    (0x1A, 0x42, 0x56),
    (0x11, 0x19, 0x1E),
    (0x28, 0x0D, 0x01),
    (0x50, 0x18, 0x03),
    (0x8A, 0x3F, 0x2A),
    (0xC4, 0x75, 0x6A),
    (0xFF, 0xAD, 0xAD),
];
pub const BILBAO: [(u8, u8, u8); 10] = [
    (0x4C, 0x00, 0x01),
    (0x73, 0x25, 0x29),
    (0x94, 0x46, 0x4B),
    (0xA0, 0x62, 0x57),
    (0xA6, 0x77, 0x5C),
    (0xAC, 0x8D, 0x61),
    (0xB5, 0xA7, 0x72),
    (0xC2, 0xBC, 0xA3),
    (0xD2, 0xD2, 0xCE),
    (0xFF, 0xFF, 0xFF),
];
pub const BROC: [(u8, u8, u8); 10] = [
    (0x2C, 0x1A, 0x4C),
    (0x28, 0x44, 0x77),
    (0x4B, 0x76, 0xA0),
    (0x8B, 0xA7, 0xC2),
    (0xCE, 0xD9, 0xE5),
    (0xE8, 0xE8, 0xD2),
    (0xC5, 0xC5, 0x8F),
    (0x8D, 0x8D, 0x56),
    (0x55, 0x55, 0x27),
    (0x26, 0x26, 0x00),
];
pub const BROCO: [(u8, u8, u8); 10] = [
    (0x37, 0x2F, 0x38),
    (0x38, 0x41, 0x64),
    (0x55, 0x72, 0x9A),
    (0x8A, 0xA3, 0xBF),
    (0xC1, 0xCC, 0xD0),
    (0xCA, 0xCB, 0xAB),
    (0x9E, 0x9E, 0x6C),
    (0x6B, 0x69, 0x3D),
    (0x44, 0x3F, 0x29),
    (0x37, 0x2F, 0x37),
];
pub const BUDA: [(u8, u8, u8); 10] = [
    (0xB3, 0x01, 0xB3),
    (0xB3, 0x2B, 0x9E),
    (0xB9, 0x48, 0x92),
    (0xC2, 0x61, 0x8A),
    (0xCA, 0x79, 0x82),
    (0xD1, 0x91, 0x7B),
    (0xD7, 0xAA, 0x75),
    (0xDD, 0xC3, 0x6F),
    (0xE5, 0xDF, 0x68),
    (0xFF, 0xFF, 0x66),
];
pub const BUKAVU: [(u8, u8, u8); 10] = [
    (0x1A, 0x33, 0x33),
    (0x22, 0x51, 0x78),
    (0x34, 0x85, 0xC2),
    (0x66, 0xB5, 0xCA),
    (0xB3, 0xE6, 0xD9),
    (0x13, 0x53, 0x18),
    (0x69, 0x73, 0x28),
    (0xAA, 0x84, 0x4F),
    (0xD3, 0xC2, 0xAA),
    (0xED, 0xED, 0xFC),
];
pub const CORK: [(u8, u8, u8); 10] = [
    (0x2C, 0x19, 0x4C),
    (0x28, 0x45, 0x78),
    (0x49, 0x74, 0x9F),
    (0x83, 0xA1, 0xBE),
    (0xCA, 0xD7, 0xE3),
    (0xD2, 0xE1, 0xD2),
    (0x8E, 0xB3, 0x8D),
    (0x4F, 0x89, 0x4E),
    (0x1C, 0x5B, 0x19),
    (0x0F, 0x29, 0x03),
];
pub const CORKO: [(u8, u8, u8); 10] = [
    (0x3F, 0x3E, 0x3A),
    (0x3E, 0x44, 0x5D),
    (0x54, 0x6E, 0x94),
    (0x84, 0x9E, 0xBA),
    (0xAD, 0xC4, 0xC8),
    (0xA1, 0xC4, 0xA6),
    (0x73, 0xA3, 0x6F),
    (0x4F, 0x73, 0x3B),
    (0x43, 0x4F, 0x2C),
    (0x3F, 0x3E, 0x3A),
];
pub const DAVOS: [(u8, u8, u8); 10] = [
    (0x00, 0x05, 0x4A),
    (0x11, 0x2C, 0x71),
    (0x29, 0x52, 0x91),
    (0x43, 0x70, 0x9D),
    (0x5E, 0x85, 0x98),
    (0x79, 0x96, 0x8D),
    (0x99, 0xAD, 0x88),
    (0xC9, 0xD2, 0x9E),
    (0xF3, 0xF3, 0xD2),
    (0xFE, 0xFE, 0xFE),
];
pub const DEVON: [(u8, u8, u8); 10] = [
    (0x2C, 0x1A, 0x4C),
    (0x29, 0x34, 0x67),
    (0x27, 0x51, 0x86),
    (0x36, 0x69, 0xAD),
    (0x61, 0x81, 0xD0),
    (0x98, 0x9B, 0xE7),
    (0xBA, 0xB3, 0xF1),
    (0xD0, 0xCC, 0xF5),
    (0xE8, 0xE5, 0xFA),
    (0xFF, 0xFF, 0xFF),
];
pub const FES: [(u8, u8, u8); 10] = [
    (0x0D, 0x0D, 0x0D),
    (0x40, 0x40, 0x40),
    (0x6D, 0x6D, 0x6D),
    (0x97, 0x97, 0x97),
    (0xCE, 0xCE, 0xCE),
    (0x2E, 0x50, 0x20),
    (0x75, 0x64, 0x2A),
    (0xB6, 0x83, 0x4D),
    (0xD3, 0xC2, 0xAA),
    (0xED, 0xED, 0xFC),
];
pub const GLASGOW: [(u8, u8, u8); 10] = [
    (0x36, 0x13, 0x38),
    (0x4F, 0x1A, 0x23),
    (0x6B, 0x26, 0x0B),
    (0x74, 0x45, 0x00),
    (0x71, 0x63, 0x11),
    (0x68, 0x7C, 0x48),
    (0x60, 0x92, 0x7D),
    (0x74, 0xA9, 0xB0),
    (0xA6, 0xBE, 0xD8),
    (0xDB, 0xD3, 0xFF),
];
pub const GRAYC: [(u8, u8, u8); 10] = [
    (0x00, 0x00, 0x00),
    (0x23, 0x23, 0x23),
    (0x3D, 0x3D, 0x3D),
    (0x56, 0x56, 0x56),
    (0x6C, 0x6C, 0x6C),
    (0x82, 0x82, 0x82),
    (0x9A, 0x9A, 0x9A),
    (0xB6, 0xB6, 0xB6),
    (0xD8, 0xD8, 0xD8),
    (0xFF, 0xFF, 0xFF),
];
pub const HAWAII: [(u8, u8, u8); 10] = [
    (0x8C, 0x02, 0x73),
    (0x92, 0x2A, 0x59),
    (0x96, 0x47, 0x42),
    (0x99, 0x63, 0x30),
    (0x9D, 0x83, 0x1E),
    (0x97, 0xA9, 0x2A),
    (0x80, 0xC5, 0x5F),
    (0x66, 0xD8, 0x9C),
    (0x6C, 0xEB, 0xDB),
    (0xB3, 0xF2, 0xFD),
];
pub const IMOLA: [(u8, u8, u8); 10] = [
    (0x1A, 0x33, 0xB3),
    (0x24, 0x46, 0xA9),
    (0x2E, 0x59, 0x9F),
    (0x39, 0x6B, 0x94),
    (0x49, 0x7B, 0x85),
    (0x60, 0x92, 0x7B),
    (0x7B, 0xAE, 0x74),
    (0x98, 0xCB, 0x6D),
    (0xC4, 0xEA, 0x67),
    (0xFF, 0xFF, 0x66),
];
pub const LAJOLLA: [(u8, u8, u8); 10] = [
    (0x19, 0x19, 0x00),
    (0x33, 0x22, 0x0F),
    (0x5B, 0x30, 0x23),
    (0x8F, 0x40, 0x3D),
    (0xC7, 0x50, 0x4B),
    (0xE0, 0x72, 0x4F),
    (0xE7, 0x94, 0x52),
    (0xEE, 0xB5, 0x55),
    (0xF8, 0xDF, 0x7C),
    (0xFF, 0xFE, 0xCB),
];
pub const LAPAZ: [(u8, u8, u8); 10] = [
    (0x1A, 0x0C, 0x64),
    (0x23, 0x2D, 0x7B),
    (0x2A, 0x4C, 0x8F),
    (0x36, 0x67, 0x9D),
    (0x4C, 0x80, 0xA3),
    (0x6E, 0x95, 0xA1),
    (0x94, 0xA2, 0x98),
    (0xBF, 0xB1, 0x99),
    (0xEF, 0xD3, 0xC0),
    (0xFE, 0xF2, 0xF3),
];
pub const LIPARI: [(u8, u8, u8); 10] = [
    (0x03, 0x13, 0x26),
    (0x13, 0x38, 0x5A),
    (0x47, 0x58, 0x7A),
    (0x6B, 0x5F, 0x76),
    (0x8E, 0x61, 0x6C),
    (0xBC, 0x64, 0x61),
    (0xE5, 0x7B, 0x62),
    (0xE7, 0xA2, 0x79),
    (0xE9, 0xC9, 0x9F),
    (0xFD, 0xF5, 0xDA),
];
pub const LISBON: [(u8, u8, u8); 10] = [
    (0xE6, 0xE5, 0xFF),
    (0x9B, 0xAF, 0xD3),
    (0x51, 0x77, 0xA4),
    (0x1E, 0x43, 0x68),
    (0x11, 0x1E, 0x2C),
    (0x27, 0x25, 0x1A),
    (0x57, 0x51, 0x34),
    (0x8D, 0x85, 0x56),
    (0xC9, 0xC3, 0x90),
    (0xFF, 0xFF, 0xD9),
];
pub const MANAGUA: [(u8, u8, u8); 10] = [
    (0xFF, 0xCF, 0x67),
    (0xDD, 0x9A, 0x55),
    (0xB9, 0x6C, 0x46),
    (0x92, 0x46, 0x3B),
    (0x67, 0x2B, 0x3C),
    (0x4E, 0x31, 0x5E),
    (0x4E, 0x55, 0x93),
    (0x5B, 0x80, 0xBC),
    (0x6D, 0xB1, 0xDE),
    (0x81, 0xE7, 0xFF),
];
pub const NAVIA: [(u8, u8, u8); 10] = [
    (0x03, 0x13, 0x27),
    (0x07, 0x34, 0x5E),
    (0x15, 0x58, 0x8B),
    (0x28, 0x72, 0x8F),
    (0x38, 0x82, 0x85),
    (0x4B, 0x93, 0x7A),
    (0x65, 0xAB, 0x6C),
    (0x98, 0xCB, 0x6F),
    (0xD8, 0xE5, 0xA8),
    (0xFC, 0xF4, 0xD9),
];
pub const NUUK: [(u8, u8, u8); 10] = [
    (0x05, 0x59, 0x8C),
    (0x29, 0x62, 0x84),
    (0x4A, 0x72, 0x83),
    (0x6F, 0x87, 0x8D),
    (0x92, 0x9C, 0x96),
    (0xAB, 0xAD, 0x96),
    (0xBA, 0xB9, 0x8D),
    (0xC7, 0xC6, 0x84),
    (0xE0, 0xE0, 0x8E),
    (0xFE, 0xFE, 0xB2),
];
pub const OLERON: [(u8, u8, u8); 10] = [
    (0x1A, 0x26, 0x59),
    (0x45, 0x52, 0x85),
    (0x77, 0x84, 0xB7),
    (0xAA, 0xB7, 0xE8),
    (0xD3, 0xE0, 0xFA),
    (0x3C, 0x56, 0x00),
    (0x7A, 0x71, 0x1F),
    (0xB7, 0x9A, 0x5E),
    (0xF1, 0xCE, 0xA4),
    (0xFD, 0xFD, 0xE6),
];
pub const OSLO: [(u8, u8, u8); 10] = [
    (0x01, 0x01, 0x01),
    (0x0D, 0x1B, 0x29),
    (0x13, 0x32, 0x51),
    (0x1F, 0x4C, 0x7B),
    (0x38, 0x69, 0xA8),
    (0x65, 0x8A, 0xC7),
    (0x89, 0xA0, 0xCA),
    (0xAA, 0xB6, 0xCA),
    (0xD4, 0xD6, 0xDB),
    (0xFF, 0xFF, 0xFF),
];
pub const ROMA: [(u8, u8, u8); 10] = [
    (0x7E, 0x17, 0x00),
    (0x99, 0x52, 0x15),
    (0xB0, 0x80, 0x2B),
    (0xC8, 0xB4, 0x55),
    (0xD0, 0xE3, 0xA3),
    (0xA4, 0xE5, 0xD3),
    (0x5D, 0xC1, 0xD3),
    (0x32, 0x92, 0xC2),
    (0x20, 0x64, 0xAE),
    (0x03, 0x31, 0x98),
];
pub const ROMAO: [(u8, u8, u8); 10] = [
    (0x73, 0x39, 0x57),
    (0x87, 0x40, 0x37),
    (0xA3, 0x67, 0x2C),
    (0xC3, 0xA3, 0x4B),
    (0xD6, 0xD8, 0x93),
    (0xB4, 0xDE, 0xC6),
    (0x74, 0xBB, 0xCD),
    (0x4F, 0x88, 0xB9),
    (0x5C, 0x53, 0x8B),
    (0x72, 0x39, 0x59),
];
pub const TOFINO: [(u8, u8, u8); 10] = [
    (0xDE, 0xD9, 0xFF),
    (0x93, 0xA4, 0xDE),
    (0x4A, 0x6B, 0xAC),
    (0x27, 0x3C, 0x65),
    (0x12, 0x19, 0x26),
    (0x12, 0x22, 0x14),
    (0x24, 0x4D, 0x28),
    (0x3F, 0x81, 0x44),
    (0x88, 0xB9, 0x70),
    (0xDB, 0xE6, 0x9B),
];
pub const TOKYO: [(u8, u8, u8); 10] = [
    (0x1C, 0x0E, 0x34),
    (0x4B, 0x20, 0x44),
    (0x69, 0x40, 0x4E),
    (0x70, 0x57, 0x51),
    (0x72, 0x67, 0x53),
    (0x76, 0x7B, 0x54),
    (0x7C, 0x98, 0x59),
    (0x8D, 0xC1, 0x6E),
    (0xC1, 0xED, 0xAB),
    (0xEF, 0xFC, 0xDD),
];
pub const TURKU: [(u8, u8, u8); 10] = [
    (0x00, 0x00, 0x00),
    (0x24, 0x24, 0x20),
    (0x42, 0x42, 0x35),
    (0x5F, 0x5F, 0x44),
    (0x7E, 0x7C, 0x52),
    (0xA9, 0x99, 0x65),
    (0xCF, 0xA6, 0x7C),
    (0xEA, 0xAD, 0x98),
    (0xFC, 0xC7, 0xC3),
    (0xFF, 0xE6, 0xE6),
];
pub const VANIMO: [(u8, u8, u8); 10] = [
    (0xFF, 0xCD, 0xFD),
    (0xD3, 0x81, 0xC4),
    (0xA1, 0x49, 0x8E),
    (0x5C, 0x24, 0x4F),
    (0x23, 0x14, 0x1D),
    (0x1B, 0x1E, 0x11),
    (0x36, 0x49, 0x1A),
    (0x5A, 0x7C, 0x2A),
    (0x85, 0xB5, 0x4D),
    (0xBE, 0xFD, 0xA5),
];
pub const VIK: [(u8, u8, u8); 10] = [
    (0x00, 0x12, 0x61),
    (0x03, 0x3E, 0x7D),
    (0x1E, 0x6F, 0x9D),
    (0x71, 0xA8, 0xC4),
    (0xC9, 0xDD, 0xE7),
    (0xEA, 0xCE, 0xBD),
    (0xD3, 0x97, 0x74),
    (0xBE, 0x65, 0x33),
    (0x8B, 0x27, 0x06),
    (0x59, 0x00, 0x08),
];
pub const VIKO: [(u8, u8, u8); 10] = [
    (0x4F, 0x1A, 0x3D),
    (0x3A, 0x35, 0x67),
    (0x3B, 0x67, 0x97),
    (0x75, 0x9E, 0xBC),
    (0xBE, 0xC2, 0xC6),
    (0xD9, 0xAE, 0x97),
    (0xC5, 0x7C, 0x56),
    (0x95, 0x3E, 0x25),
    (0x68, 0x19, 0x23),
    (0x50, 0x19, 0x3C),
];
